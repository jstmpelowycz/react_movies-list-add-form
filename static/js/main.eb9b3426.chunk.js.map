{"version":3,"sources":["constants/regexes.ts","components/FormInput/FormInput.tsx","components/MovieForm/MovieForm.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","App.tsx","index.tsx"],"names":["urlRegex","RegExp","FormInput","memo","value","name","isValid","onChange","onBlur","inputLabel","useMemo","charAt","toUpperCase","slice","htmlFor","className","type","placeholder","autoComplete","style","borderColor","MovieForm","onAdd","useState","title","setTitle","description","setDescription","imgUrl","setImgUrl","imdbUrl","setImdbUrl","imdbId","setImdbId","hasTitleError","setTitleError","hasImgUrlError","setImgUrlError","hasImdbUrlError","setImdbUrlError","hasImdbIdError","setImdbIdError","isValidUrl","test","isValidMovie","Boolean","handleTitleChange","useCallback","target","handleTitleBlur","handleImgUrlChange","handleImgUrlBlur","handleImdbUrlChange","handleImdbUrlBlur","handleImdbIdChange","handleImdbIdBlur","action","method","onSubmit","event","preventDefault","disabled","MovieCard","src","alt","href","MoviesList","movies","map","movie","App","moviesFromServer","setMovies","addMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb9b3426.chunk.js","sourcesContent":["export const urlRegex = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n","import './FormInput.scss';\nimport {\n  ChangeEvent, FC, memo, useMemo,\n} from 'react';\n\ninterface Props {\n  value: string;\n  name: string;\n  isValid: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>)=> void;\n  onBlur: (event: ChangeEvent<HTMLInputElement>)=> void;\n}\n\nexport const FormInput: FC<Props> = memo(({\n  value, name, isValid, onChange, onBlur,\n}) => {\n  const inputLabel = useMemo(() => (\n    name.charAt(0).toUpperCase() + name.slice(1)\n  ), []);\n\n  return (\n    <label htmlFor={name} className=\"FormInput__label\">\n      {inputLabel}\n\n      <input\n        className=\"FormInput__input\"\n        type=\"text\"\n        name={name}\n        value={value}\n        placeholder={`Enter your ${name}...`}\n        autoComplete=\"off\"\n        onChange={onChange}\n        onBlur={onBlur}\n        style={{\n          borderColor: isValid ? 'red' : 'initial',\n        }}\n      />\n\n      {isValid && (\n        <p className=\"FormInput__error\">\n          {`${inputLabel} is not valid!`}\n        </p>\n      )}\n    </label>\n  );\n});\n","import './MovieForm.scss';\nimport {\n  FC, FormEvent, memo, useCallback, useState,\n} from 'react';\nimport { urlRegex } from '../../constants/regexes';\nimport { FormInput } from '../FormInput';\n\ninterface Props {\n  onAdd: (movie: Movie) => void;\n}\n\nexport const MovieForm: FC<Props> = memo(({ onAdd }) => {\n  const [title, setTitle] = useState('');\n\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [hasTitleError, setTitleError] = useState(false);\n  const [hasImgUrlError, setImgUrlError] = useState(false);\n  const [hasImdbUrlError, setImdbUrlError] = useState(false);\n  const [hasImdbIdError, setImdbIdError] = useState(false);\n\n  const isValidUrl = (value: string) => urlRegex.test(value);\n\n  const isValidMovie = Boolean(title) && Boolean(imdbId)\n    && isValidUrl(imgUrl)\n    && isValidUrl(imdbUrl);\n\n  const clearForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleTitleChange = useCallback(({ target }) => {\n    setTitleError(false);\n    setTitle(target.value);\n  }, []);\n\n  const handleTitleBlur = useCallback(({ target }) => {\n    if (!target.value) {\n      setTitleError(true);\n    }\n  }, []);\n\n  const handleImgUrlChange = useCallback(({ target }) => {\n    setImgUrlError(false);\n    setImgUrl(target.value);\n  }, []);\n\n  const handleImgUrlBlur = useCallback(({ target }) => {\n    if (!isValidUrl(target.value)) {\n      setImgUrlError(true);\n    }\n  }, []);\n\n  const handleImdbUrlChange = useCallback(({ target }) => {\n    setImdbUrlError(false);\n    setImdbUrl(target.value);\n  }, []);\n\n  const handleImdbUrlBlur = useCallback(({ target }) => {\n    if (!isValidUrl(target.value)) {\n      setImdbUrlError(true);\n    }\n  }, []);\n\n  const handleImdbIdChange = useCallback(({ target }) => {\n    setImdbIdError(false);\n    setImdbId(target.value);\n  }, []);\n\n  const handleImdbIdBlur = useCallback(({ target }) => {\n    if (!target.value) {\n      setImdbIdError(true);\n    }\n  }, []);\n\n  const handleFormSubmission = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isValidMovie) {\n      onAdd({\n        title, description, imgUrl, imdbUrl, imdbId,\n      });\n\n      clearForm();\n    }\n  };\n\n  return (\n    <form\n      className=\"MovieForm__form\"\n      action=\"#\"\n      method=\"post\"\n      onSubmit={handleFormSubmission}\n    >\n      <FormInput\n        value={title}\n        name=\"title\"\n        isValid={hasTitleError}\n        onChange={handleTitleChange}\n        onBlur={handleTitleBlur}\n      />\n\n      <label\n        htmlFor=\"description\"\n        className=\"MovieForm__description-label\"\n      >\n        Description\n\n        <textarea\n          className=\"MovieForm__description-input\"\n          name=\"description\"\n          placeholder=\"Enter your description...\"\n          value={description}\n          onChange={({ target }) => {\n            setDescription(target.value);\n          }}\n        />\n      </label>\n\n      <FormInput\n        value={imgUrl}\n        name=\"imgUrl\"\n        isValid={hasImgUrlError}\n        onChange={handleImgUrlChange}\n        onBlur={handleImgUrlBlur}\n      />\n\n      <FormInput\n        value={imdbUrl}\n        name=\"ImdbUrl\"\n        isValid={hasImdbUrlError}\n        onChange={handleImdbUrlChange}\n        onBlur={handleImdbUrlBlur}\n      />\n\n      <FormInput\n        value={imdbId}\n        name=\"ImdbId\"\n        isValid={hasImdbIdError}\n        onChange={handleImdbIdChange}\n        onBlur={handleImdbIdBlur}\n      />\n\n      <button\n        className=\"MovieForm__button\"\n        type=\"submit\"\n        disabled={!isValidMovie}\n      >\n        Submit\n      </button>\n    </form>\n  );\n});\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import './App.scss';\nimport {\n  FC, memo, useCallback, useState,\n} from 'react';\nimport { MovieForm } from './components/MovieForm';\nimport { MoviesList } from './components/MoviesList';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: FC = memo(() => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = useCallback((movie) => {\n    setMovies(prevMovies => [...prevMovies, movie]);\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <MovieForm onAdd={addMovie} />\n      </div>\n    </div>\n  );\n});\n","import 'bulma/css/bulma.css';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}